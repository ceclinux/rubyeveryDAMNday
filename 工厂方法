{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 看到new的时候，就会想到具体"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "是的，当使用“new”时，你的确是在实例化一个具体类，所以用的的确是实现，而不是接口。这是一个好问题，你已经知道了代码绑着具体类会导致代码更脆弱，更缺乏弹性。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```java\n",
    "Duck duck = new MallardDuck();\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "当有一群相关的具体类时，通常会写出这样的代码"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```java\n",
    "Duck duck;\n",
    "\n",
    "if(pacnic){\n",
    "  duck = new MallardDuck();\n",
    "}else if(hunting){\n",
    "  duck = new RubberDuck();\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "当看到这样的代码，一旦有变化或扩展，就必须重新打开这段代码进行检查和修改。通常这样修改过得代码将早晨各部分系统更难为何和更新，而且也更容易犯错"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "针对接口编程，可以隔离掉以后系统可能发生的一大堆改变。为什么呢？如果代码是针对接口而写的，那么通过多态，它可以与任何新类实现该接口。但是，当代码使用大量的具体类时，等于是自找麻烦，因为一旦加入新的具体类，就必须改变代码。也就是说，你的代码并非“对修改关系”。想用新的具体类型来扩展代码，必须重新打开它。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 对扩展开放，对修改关闭，找出会变化的方面，吧它们从不变的部分脱离出来"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```java\n",
    "Pizza orderPizza(){\n",
    "  if(type.equals(\"cheese\"){\n",
    "    pizza = new CheesePizza();\n",
    "                          }else if(type.equals(\"greek\"){\n",
    "    pizza = new GreekPizza();\n",
    "                                                       }else if(type.equals(\"pepperoni\"){\n",
    "    pizza = new PepperoniPizze();\n",
    "                                                                                        }\n",
    "\n",
    "  pizza.prepare();\n",
    "  pizza.bake();\n",
    "  pizza.cut();\n",
    "  pizza.box();\n",
    "  return pizza;\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**工厂（factory）处理创建对象的细节**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**这样做有什么好处？似乎只是把问题搬到另一个对象罢了，问题依然存在**。别忘了，`SimplePizzaFactory`可以有许多的客户。虽然目前制单到`orderPizza()`方法时它的客户，然而，可能还有`PizzaShopMenu（比萨店菜单）`类，会利用这个工厂来取得比萨的价钱和描述。可能还有一个`HomeDelivery（宅急送）`类，会以与`PizzaShop`类不同的方式来处理比萨。总而言之，`SimplePizzaFactory`可以用许多的客户。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "所以，吧构建比萨的代码包装进一个类，当以后实现改变时，只需修改这个类即可"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```java\n",
    "public class SimplePizzaFactory{\n",
    "  public Pizza createPizza(String type){\n",
    "  pizza = new CheesePizza();\n",
    "}else if(type.equals(\"pepperoni)){\n",
    "  pizza = new ClamPizze();\n",
    "}\n",
    "}\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```java\n",
    "public class PizzaStore{\n",
    "  SimplePizzaFactory factory;\n",
    "\n",
    "public PizzaStore(SimplePizzaFactory factory){\n",
    "  this.factory = factory;\n",
    "}\n",
    "\n",
    "public Pizza orderPizza(String type){\n",
    "\n",
    "Pizza pizza;\n",
    "\n",
    "pizza = factory.createPizza(type);\n",
    "\n",
    "pizza.prepare();\n",
    "pizza.bake();\n",
    "pizza.cut();\n",
    "...\n",
    "return pizza\n",
    "}\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "简单工厂其实不是一个设计模式，反而比较像是一种编程习惯。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "你真的希望能够建立一个框架，把加盟店和创建披萨捆绑在一起的同时又保持一定的弹性。\n",
    "\n",
    "在我们稍早的`SimplePizzaFactory`代码之前，制作比萨的代码绑在`PizzaStore`里，但这么做却没有弹性。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```java\n",
    "public abstract class PizzaStore {\n",
    "  public Pizza orderPizza(String type){\n",
    "    pizza = createPizza(type);\n",
    "    pizza.prepare();\n",
    "    pizza.bake();\n",
    "    pizza.cut();\n",
    "    pizza.box();\n",
    "   \n",
    "    return pizza;\n",
    "}\n",
    "abstract Pizza createPizza(String type);\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "每个子类都会覆盖`createPizza()`方法，同时使用`pizzaStore`定义的`orderPizza()`方法。甚至可以把`orderPizza()`方法申明为`final`，以防止被子类覆盖"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "工厂方法用于处理对象的创建，并将这样的行为封装在子类中。这样，客户程序中光宇超类的代码就和子类对象创建代码解耦了。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**所有工厂模式都是用来封装对象的创建**。工厂方法模式（`Factory Method Pattern`）通过让子类决定该创建的对象是什么，来达到将对象创建的工程封装的目的。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**创建者类** PizzaStore:createPizza(), orderPizza() 这是一个抽象创建者类。它定义了一个抽象的工厂方法，让子类实现此方法制造产品"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**当只有一个`ConcreteCreator`的时候，工厂方法模式有什么优点？** 尽管只有一个具体创建者，工厂方法模式依然很有用，因为它帮助我们将产品的“实现”从“使用”中解耦。如果增加产品或者改变产品的实现，`Creator`并不会受到影响"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**工厂方法和创建者是否总是抽象的？**不，可以定义一个默认的工厂方法来产生某些具体的产品，这么一来，即使创建者没有任何子类，依然可以创建产品"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**能不能只创建一种披萨**这里所采用的方式称为“参数式工厂方法”。它可根据传入的参数创建不同的对象。然而，工厂经常只产生有一种对象，不需要参数化。模式的这两种形式都是有效的"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**要依赖抽象，不要依赖具体类**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "应该重写代码以便于我们依赖抽象类，而不依赖具体类。对于高层及低层模块都应该如此"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "所谓“高层”组件，是由其他低层组件定义其行为的类。例如，`PizzaStore`是个高层组件，因为它的行为是由比萨定义的：`PizzaStore`创建所有不同的比萨对象，准备、烘焙、切片、装盒；而披萨属于低层组件"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "想要遵循依赖倒置原则，工厂方法并非是唯一的技巧，但确却是最有威力的技巧之一"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Ruby 2.5.1",
   "language": "ruby",
   "name": "ruby"
  },
  "language_info": {
   "file_extension": ".rb",
   "mimetype": "application/x-ruby",
   "name": "ruby",
   "version": "2.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
